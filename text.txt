* Componente: pequeña pieza de codigo encapsulada re-utilizable que puede tener estado o no.
* Estado: como se encuentra la info del componente en un punto determinado del tiempo.
* Estado inicial: cuando el componente es renderizado por primera vez, es como se encuentra la info del componente la primera vez que se abre.
* Una promesa es un objeto.
* Para renderizar una variable objeto se debe hacer un json.stringify() para evitar un error.
* Los functional components reciben props(propiedades que son un objeto, tiene determinada informacion dependiendo del contexto), son las propiedades de una funcion.
* Las props establecen un canal de comunicacion entre el padre y el propio children que contiene las props.
* Las props son informacion que fluye desde el componente padre a el componente hijo.
* El contexto es el arbol de componentes.
* Las proptypes definen el tipo a las properties.
* Los default props entran antes que los proptypes.
* {} is a javascript expresion
* Los hooks (funciones) permiten usar más de las funciones de React sin clases.

* Las pruebas unitarias estan enfocadas en pequeñas funcionalidades, pequeñas piezas a probar.
* Las pruebas de integracion estan enfocadas en como reaccionan varias piezas en conjunto.
* Las pruebas deben ser:
    - Faciles de escribir
    - Faciles de leer
    - Confiables
    - Rapidas
    - Principalmente unitarias
Primero se prueban las piezas pequeñas, luego la prueba de interaccion confirmaria la interaccion entre entre si,
No realizar pruebas unitarias dentro de las pruebas de integracion.

* Las pruebas:
    - La aplicacion puede tener errores al ser un programa programado por humanos.
    - Las pruebas pueden fallar, arrojando falsos positivos o falsos negativos, que el programa funcione pero en la prueba no funciono o viceversa.
    - No hacen mas lenta la aplicacion, porque corren directamente en la maquina de desarrollo, las pruebas no llegan a la parte de produccion,
        no son parte de lo que se desplegara en un servidor. Las pruebas son locales y se ejecutan en la maquina de desarrollo.

* AAA: caracteristicas a aplicar en las pruebas
    - Arrange (arreglar): el paso el cual se establece el estado inicial, la preparacion del ambiente del sujeto a probar,
        como la inicializacion de variables e importaciones necesarias.
    - Act (actuar): donde se aplican acciones o estimulos al sujeto de pruebas para preparar el assert, como llamar metodos, simular clicks
        y realizar acciones sobre el paso anterior.
    - Assert (afirmar): observar el comportamiento resultante, son los resultados esperados. Por ejemplo:
        que algo cambie, incremente o que aplicar el estimulo nada suceda.

* 